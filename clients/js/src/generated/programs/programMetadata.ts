/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAllocateInstruction,
  type ParsedCloseInstruction,
  type ParsedExtendInstruction,
  type ParsedInitializeInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSetDataInstruction,
  type ParsedSetImmutableInstruction,
  type ParsedTrimInstruction,
  type ParsedWriteInstruction,
} from '../instructions';

export const PROGRAM_METADATA_PROGRAM_ADDRESS =
  '4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1' as Address<'4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1'>;

export enum ProgramMetadataAccount {
  Buffer,
  Metadata,
}

export enum ProgramMetadataInstruction {
  Write,
  Initialize,
  SetAuthority,
  SetData,
  SetImmutable,
  Trim,
  Close,
  Allocate,
  Extend,
}

export function identifyProgramMetadataInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ProgramMetadataInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return ProgramMetadataInstruction.Write;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return ProgramMetadataInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return ProgramMetadataInstruction.SetAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return ProgramMetadataInstruction.SetData;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return ProgramMetadataInstruction.SetImmutable;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return ProgramMetadataInstruction.Trim;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return ProgramMetadataInstruction.Close;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return ProgramMetadataInstruction.Allocate;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return ProgramMetadataInstruction.Extend;
  }
  throw new Error(
    'The provided instruction could not be identified as a programMetadata instruction.'
  );
}

export type ParsedProgramMetadataInstruction<
  TProgram extends string = '4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1',
> =
  | ({
      instructionType: ProgramMetadataInstruction.Write;
    } & ParsedWriteInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.SetData;
    } & ParsedSetDataInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.SetImmutable;
    } & ParsedSetImmutableInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.Trim;
    } & ParsedTrimInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.Allocate;
    } & ParsedAllocateInstruction<TProgram>)
  | ({
      instructionType: ProgramMetadataInstruction.Extend;
    } & ParsedExtendInstruction<TProgram>);
