/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address,
  type ProgramDerivedAddress,
} from '@solana/kit';
import { getSeedEncoder, type SeedArgs } from '../types';

export type NonCanonicalSeeds = {
  /** The program to which the metadata belongs. */
  program: Address;
  /** The third-party authority managing this metadata account. */
  authority: Address;
  /** The seed deriving the metadata account. */
  seed: SeedArgs;
};

export async function findNonCanonicalPda(
  seeds: NonCanonicalSeeds,
  config: { programAddress?: Address | undefined } = {}
): Promise<ProgramDerivedAddress> {
  const {
    programAddress = '4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1' as Address<'4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1'>,
  } = config;
  return await getProgramDerivedAddress({
    programAddress,
    seeds: [
      getAddressEncoder().encode(seeds.program),
      getAddressEncoder().encode(seeds.authority),
      getSeedEncoder().encode(seeds.seed),
    ],
  });
}
